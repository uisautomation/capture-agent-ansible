## capture-agent-common/tasks
---
# Always include host specific machine facts
- include_tasks: set_facts.yml
  tags: always

# Reinstall OS on variable (limit to xenial to prevent overwriting bionic)
- include_tasks: ../../capture-agent-reinstall/tasks/main.yml
  when:
    - ansible_distribution == 'Ubuntu'
    - reinstall_os|default(false)
    - ansible_distribution_release == 'xenial'

## Post Install tasks
# check that os update has happened otherwise fail
- name: "Get os codename"
  shell: lsb_release -c | cut -f2
  register: codename

- fail:
    msg: "This ansible playbook requires ubuntu xenial 16.04 or bionic 18.04 be installed before it will run"
  when: ansible_distribution == 'Ubuntu' and codename.stdout != 'xenial' and codename.stdout != 'bionic'

## APT

# apt proxy handled during play, setting 'environment'

- name: "Remove default apt proxy"
  file:
    path: /etc/apt/apt.conf
    state: absent
  tags: apt

- name: "Turn off auto update"
  copy:
    src: etc/apt/apt.conf.d/{{ item }}
    dest: /etc/apt/apt.conf.d/{{ item }}
  with_items:
    - 10periodic
    - 20auto-upgrades
  tags:
    - apt
    - apt_release
    - gst_update

- name: "Turn off auto update (default release)"
  template:
    src: 10defaultrelease.j2
    dest: /etc/apt/apt.conf.d/10defaultrelease
  tags:
    - apt
    - apt_release
    - gst_update

- name: "Generate apt service config folders"
  file:
    path: /etc/systemd/system/apt-daily.timer.d
    state: directory
    recurse: yes
  tags:
    - apt

- name: "Configure apt autoupgrade service as off"
  template:
    src: apt-daily.timer.conf.j2
    dest: /etc/systemd/system/apt-daily.timer.d/apt-daily.timer.conf
    mode: "0664"
  tags:
    - apt

# Ubuntu 'extra' repos not in install iso

# 64 bit os so all repo pkgs need to be all/ or x86_64

- name: "Add local apt sources"
  become_method: sudo
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "deb {{ manchester_deb_repo }} all/"
  when: deb_repo_hostname|default(false)
  tags: apt

- name: "Update apt cache"
  apt:
    update_cache: yes
  become_method: sudo
  tags:
    - apt
    - apt_update
    - gst_update

- name: "Remove broken packages"
  apt:
    pkg:
      - libgweather-common
    state: absent
  tags:
    - apt
    - apt_update

- name: "Upgrade kernel to latest HWE version"
  apt:
    pkg: '{{ item }}'
    dpkg_options: 'force-confold,force-confdef'
    install_recommends: yes
  with_items:
    - linux-generic-hwe-{{ ansible_distribution_version }}
    - xserver-xorg-hwe-{{ ansible_distribution_version }}
    - linux-headers-generic-hwe-{{ ansible_distribution_version }}
  when: upgrade_hwe|default(false)
  register: kernel_update
  notify:
    - Restart host
    - Wait for host to restart
  tags:
    - apt
    - apt_update

- name: "Copy new xserver Xorg config files"
  copy:
    src: etc/X11/{{ item }}
    dest: /etc/X11/xorg.conf
  with_items:
    - xorg-new.conf
  when: upgrade_hwe|default(false)
  tags:
    - ca_config
    - xorg
    - apt_update

- name: "do a dist upgrade"
  apt:
    upgrade: dist
    dpkg_options: 'force-confold,force-confdef'
  when: (cpu is defined and cpu >= '6') or (upgrade_os|default(false))
  register: kernel_update
  notify:
    - Restart host
    - Wait for host to restart
  tags:
    - apt
    - apt_update
## KERNEL

- name: "Configure kernel system parameters"
  template:
    src: sysctl.j2
    dest: /etc/sysctl.conf
  tags:
    - kernel
    - sysctl

## SYSTEM

- name: "Install system support packages"
  apt:
    pkg:
      - ssh
      - nano
      - snmp
      - snmpd
      - x11vnc
      - ntpdate
      - nedit
      - python-pip
      - pavucontrol
      - unity-lens-applications
      - unity-control-center
      - python-yaml
      - firefox
      - mediainfo
    state: present
  tags:
    - system
    - vnc
    - ntp
    - unity

- name: "Install specific system security updates"
  apt:
    pkg:
      - openssl
      - libssl1.0.0
    state: latest

## APT PKG REMOVAL

- name: "Remove packages"
  apt:
    pkg:
      - avahi-daemon
      - cups
      - chromium-browser
      - bluez
    state: absent
  tags:
    - avahi
    - network
    - desktop
    - apt_remove
    - disable_bluetooth

- name: "Setup remote login"
  copy:
    src: root/_ssh/{{ item }}
    dest: /root/.ssh/{{ item }}
    mode: "0600"
  with_items:
    - config
    - known_hosts
  tags: remote

- name: "Generate system config folders"
  file:
    path: /etc/{{ item }}
    state: directory
    recurse: yes
  with_items:
    - logrotate.d
  tags:
    - apache

- name: "Set NTP servers in timesyncd conf"
  lineinfile:
    dest: /etc/systemd/timesyncd.conf
    regexp: "^#?NTP="
    line: "NTP={{ ntp_server }}"
  tags:
    - ntp

- name: "Setup CA name"
  template:
    src: ca_name
    dest: /etc/ca_name
  tags: ca_config

- name: "Setup automatic login"
  template:
    src: lightdm.j2
    dest: /etc/lightdm/lightdm.conf
  tags: ca_config

- name: "Copy Xorg config files"
  copy:
    src: etc/X11/{{ item }}
    dest: /etc/X11/{{ item }}
  with_items:
    - xorg.conf
  when: motherboard.stdout == "Z97-PRO GAMER" or motherboard.stdout == '8053'
  tags:
    - ca_config
    - xorg

## VNC

- name: vnc - create vnc user directory
  file:
    path: /home/{{ ca_username }}/.vnc
    state: directory
  tags: vnc

- name: vnc - setup x11vnc password
  shell: 'x11vnc -storepasswd "{{ ca_vnc_password }}" /home/{{ ca_username }}/.vnc/passwd'
  args:
    creates: "/home/{{ ca_username }}/.vnc/passwd"
  tags: vnc

- name: vnc - change permissions of x11vnc password file
  file:
    path: /home/{{ ca_username }}/.vnc/passwd
    owner: "{{ ca_username }}"
    group: "{{ ca_username }}"
    mode: "0644"
  tags: vnc

- name: vnc - setup vnc systemd service
  template:
    src: x11vnc.j2
    dest: /lib/systemd/system/x11vnc.service
  register: vnc_change
  tags: vnc

- name: vnc - enable x11vnc service
  systemd:
    enabled: yes
    daemon_reload: yes
    name: x11vnc.service
  when: vnc_change.changed
  tags: vnc

- name: vnc - start x11vnc service
  systemd:
    state: restarted
    name: x11vnc.service
  when: vnc_change.changed and ansible_connection != "local"
  tags: vnc

## UNITY DESKTOP

# Handled by 'gsettings' by /usr/locl/bin/1st-run ran on first reboot

## BLUETOOTH

- name: "Stop Bluetooth Service"
  systemd:
    enabled: no
    masked: yes
    daemon_reload: yes
    name: bluetooth.service
  ignore_errors: yes
  register: bluetooth
  tags: disable_bluetooth

- name: "Remove Bluetooth Startup links"
  shell: update-rc.d bluetooth remove
  # when:   bluetooth.changed
  tags: disable_bluetooth

- name: "Disable bluetooth in rc.local"
  lineinfile:
    dest: /etc/rc.local
    insertbefore: "exit 0"
    regexp: "rfkill block bluetooth"
    line: "rfkill block bluetooth"
    create: yes
  tags:
    - scripts
    - disable_bluetooth

- name: "Setup /etc/hostname"
  template:
    src: hostname
    dest: /etc/hostname
  tags: network

- name: "Setup /etc/hosts"
  template:
    src: hosts.j2
    dest: /etc/hosts
  tags: network

- name: "Setup /etc/hosts.allow"
  template:
    src: hosts.allow.j2
    dest: /etc/hosts.allow
  tags: network

- name: "Setup /etc/hosts.deny"
  template:
    src: hosts.deny.j2
    dest: /etc/hosts.deny
  tags: network

## BOOT TIME

- name: "FSCK non-interactive if ran"
  lineinfile:
    dest: /etc/default/rcS
    regexp: "^FSCKFIX="
    line: "FSCKFIX=yes"
    create: yes
  tags:
    - grub
    - boot

- name: "continue normal boot on hdd error"
  replace:
    dest: /etc/fstab
    regexp: "errors=remount-ro"
    replace: "errors=continue"
  tags:
    - grub
    - boot

## GRUB

- name: "Configure GRUB timeout"
  lineinfile:
    dest: /etc/default/grub
    regexp: "GRUB_TIMEOUT=*"
    line: "GRUB_TIMEOUT=1"
  register: grub_change
  tags: grub

- name: "Configure GRUB fail timeout"
  lineinfile:
    dest: /etc/default/grub
    insertafter: EOF
    line: "GRUB_RECORDFAIL_TIMEOUT=2"
  register: grub_change
  tags: grub

- name: "Configure GRUB boot with no splash"
  lineinfile:
    dest: /etc/default/grub
    regexp: "GRUB_CMDLINE_LINUX_DEFAULT=*"
    line: 'GRUB_CMDLINE_LINUX_DEFAULT=""'
  register: grub_change
  tags: grub

- name: "Update GRUB"
  shell: /usr/sbin/update-grub > /tmp/grub-update
  args:
    creates: /tmp/grub-update
  when: grub_change.changed
  tags: grub

## UBUNTU NOTIFICATIONS

- name: "Suppress error popups"
  lineinfile:
    dest: /etc/default/apport
    regexp: "enabled=*"
    line: "enabled=0"
  tags: updates_silent

- name: "Suppress update popups"
  lineinfile:
    dest: /etc/xdg/autostart/update-notifier.desktop
    regexp: "NoDisplay=*"
    line: "NoDisplay=false"
  tags: updates_silent

- name: "Suppress further updates popups"
  lineinfile:
    dest: /etc/xdg/autostart/update-notifier.desktop
    regexp: "X-GNOME-Autostart-Delay=*"
    line: "X-GNOME-Autostart-Delay=false"
  tags: updates_silent

- name: "Suppress new release popups"
  lineinfile:
    dest: /etc/update-manager/release-upgrades
    regexp: "Prompt=*"
    line: "Prompt=never"
  tags: updates_silent

## TIMER SERVERS

- name: Set timezone to Europe/London
  command: /usr/bin/timedatectl set-timezone "Europe/London"
  tags:
    - ntp
    - update_ntp

- name: Make sure timesyncd is enabled
  command: /usr/bin/timedatectl set-ntp true
  tags:
    - ntp
    - update_ntp

## IPTABLES

- name: "Make ferm dir"
  file:
    path: /etc/ferm
    state: directory
  tags: iptables

- name: "Configure ferm Iptables rules config"
  template:
    src: ferm.j2
    dest: /etc/ferm/ferm.conf
  register: ferm
  tags: iptables

- name: "Install ferm Iptables config tool"
  apt:
    pkg: ferm
    state: latest
    dpkg_options: 'force-confold,force-confdef'
  register: ferm
  tags: iptables

- name: "reload ferm"
  service:
    name: ferm
    state: reloaded
  when: ferm.changed
  tags: iptables

## NAGIOS (limit to 16.04 - missing packages in 18.04)

- name: "Install packages required by nagios-nrpe"
  apt:
    pkg:
      - nagios-nrpe-server
      - nagios-plugins
      - libnagios-plugin-perl
    state: present
  when: ansible_distribution_version == '16.04'
  tags: nagios

- name: "Configure nagios-nrpe-server"
  template:
    src: nrpe.j2
    dest: /etc/nagios/nrpe.cfg
  when: ansible_distribution_version == '16.04'
  tags:
    - nagios
    - nagios_config

- name: "Copy custom nagios plugins to nagios dir"
  copy:
    src: "{{ item }}"
    dest: /usr/lib/nagios/plugins/
    mode: "0755"
  with_items:
    - check_mic
    - check_blinkstick
    - check_linux_stats.pl
    - check_low_load
  when: ansible_distribution_version == '16.04'
  tags:
    - nagios
    - nagios_plugins

- name: "Install check_linux_stats dependancy libsys-statistics-linux-perl Package"
  apt:
    pkg: libsys-statistics-linux-perl
    state: latest
    force: yes
  when: ansible_distribution_version == '16.04'
  tags:
    - nagios
    - nagios_plugins

- name: "Copy check_lm_sensors nagios plugin"
  copy:
    src: "{{ item }}"
    dest: /usr/lib/nagios/plugins/
    mode: "0755"
  with_items:
    - check_lm_sensors
  when: ansible_distribution_version == '16.04'
  tags:
    - nagios
    - nagios_plugins
    - sensors

- name: "Install lm-sensors Package"
  apt:
    pkg: lm-sensors
    state: latest
    force: yes
  register: sensor_change
  when: ansible_distribution_version == '16.04'
  tags:
    - nagios
    - sensors

- name: "Run lm-sensors auto-conf"
  shell: /usr/sbin/sensors-detect --auto;
  when:
    - sensor_change.changed
    - ansible_distribution_version == '16.04'
  tags:
    - nagios
    - sensors

- name: "Add kernel module coretemp for lm-sensors"
  lineinfile:
    dest: /etc/modules
    line: "coretemp"
    state: present
    insertafter: EOF
    regexp: '^coretemp?'
  when:
    - legacy
    - ansible_distribution_version == '16.04'
  tags:
    - nagios
    - sensors

- name: "Add kernel module it87 for lm-sensors"
  lineinfile:
    dest: /etc/modules
    line: "it87"
    state: present
    insertafter: EOF
    regexp: '^it87?'
  when:
    - legacy
    - ansible_distribution_version == '16.04'
  tags:
    - nagios
    - sensors

- name: "Restart kernel modules"
  service:
    name: module-init-tools
    state: restarted
  when:
    - legacy
    - sensor_change.changed
    - ansible_distribution_version == '16.04'
  tags:
    - nagios
    - sensors

- name: "Restart nagios-nrpe"
  service:
    name: nagios-nrpe-server
    state: restarted
  when: ansible_distribution_version == '16.04'
  tags:
    - nagios
    - nagios_config

## CA

- name: "Copy CA scripts"
  copy:
    src: usr/{{ item }}
    dest: /usr/{{ item }}
    mode: "0755"
  with_items:
    - local/bin/1st-run
    - local/bin/checknetwork
    - local/bin/rtcwake
    - local/bin/check_load
  tags:
    - scripts
    - updates_silent
    - checknet
    - rtcwake
    - checkload

- name: "Copy CA unity-compiz settings"
  copy:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
    mode: "0755"
  with_items:
    - dconf-compiz-unity-settings.ini
  tags:
    - scripts
    - updates_silent
    - gsettings

- name: scripts - create www directory for hotplug callback
  file:
    path: /var/www
    state: directory
  tags:
    - scripts

- name: "Copy USB hotplug callback"
  template:
    src: hotplug_callback.j2
    dest: /usr/local/bin/hotplug_callback
    mode: "0755"
  tags:
    - scripts

- name: "Setup USB hotplug callback in rc.local"
  lineinfile:
    dest: /etc/rc.local
    insertbefore: "exit 0"
    regexp: "echo \"/usr/local/bin/hotplug_callback\" >/proc/sys/kernel/hotplug"
    line: "echo \"/usr/local/bin/hotplug_callback\" >/proc/sys/kernel/hotplug"
  tags:
    - scripts

- name: "Create CA user's directories"
  file:
    path: "{{ item }}"
    owner: "{{ ca_username }}"
    group: "{{ ca_username }}"
    state: directory
    recurse: yes
  with_items:
    - /home/{{ ca_username }}/.config/autostart
    - /home/{{ ca_username }}/.ssh
  tags:
    - ca_config

- name: "Config CA user's SSH"
  copy:
    src: _ssh/authorized_keys
    dest: /home/{{ ca_username }}/.ssh/authorized_keys
    owner: "{{ ca_username }}"
    group: "{{ ca_username }}"
    mode: "0600"

- name: "Config CA user's SSH hosts checking"
  copy:
    src: _ssh/config
    dest: /home/{{ ca_username }}/.ssh/config
    owner: "{{ ca_username }}"
    group: "{{ ca_username }}"
    mode: "0644"

- name: "Disable CA user's Screensaver"
  copy:
    src: _xscreensaver
    dest: "/home/{{ ca_username }}/.xscreensaver"

- name: "Setup CA user's autostarts"
  copy:
    src: "_{{ item }}"
    dest: "/home/{{ ca_username }}/.{{ item }}"
    owner: "{{ ca_username }}"
    group: "{{ ca_username }}"
    mode: "0644"
  with_items:
    - config/autostart/1st-run.desktop
    - config/autostart/update-notifier.desktop
  tags:
    - autostart

## CRONTAB

- name: "Setup Sat reboot cron job"
  cron:
    name: "reboot"
    user: root
    minute: "0"
    hour: "6"
    day: "1"
    job: "/sbin/reboot -f"
  tags:
    - cronjobs

- name: "Check network connection cron job"
  cron:
    name: "check network connection"
    user: root
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/checknetwork"
  tags:
    - cronjobs
    - checknet

- name: "Set RTC wakeup alarm cron job"
  cron:
    name: "rtc wakeup"
    user: root
    minute: "15"
    hour: "8"
    job: "/usr/local/bin/rtcwake"
  tags:
    - cronjobs
    - rtcwake

- name: "Check for high load job"
  cron:
    name: "checkload"
    user: root
    minute: "*/2"
    job: "/usr/local/bin/check_load"
  tags:
    - cronjobs
    - rtcwake
    - checkload

- name: "Set RTC wakeup alarm at reboot cron job"
  cron:
    name: "rtc wakeup reboot"
    user: root
    special_time: reboot
    job: "/usr/local/bin/rtcwake"
  tags:
    - cronjobs
    - rtcwake

- name: "Configure passwordless reboot for ca user"
  lineinfile:
    dest: /etc/sudoers
    insertafter: EOF
    line: "{{ca_username}} ALL=(ALL) NOPASSWD: /sbin/reboot"
  tags:
    - reboot
    - users
